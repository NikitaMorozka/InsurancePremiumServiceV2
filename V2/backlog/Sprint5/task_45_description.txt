**Контекст задачи (краткое описание) **
TODO: опишите контекст и задачу своими словами в свободной форме.

**Что было сделано и как? (краткое описание)**
TODO: опишите что и как делали для того, чтобы выполнить задачу.

**Зачем это было сделано? Чему научился в процессе выполнения задания?**

@Autowired private MockMvc mockMvc - инструмент, который позволяет тестировать Spring MVC
контроллеры без запуска полноценного сервера.

@Autowired — Spring автоматически создает объект MockMvc и внедряет его в тестовый класс.

MockMvc имитирует HTTP-запросы к контроллеру, но не поднимает настоящий сервер

mockMvc.perform(post("/insurance/travel/").content(тело запроса).header(параметры).andExpect(ожидаемые данные)
— выполняет POST-запрос на эндпоинт /insurance/travel/

.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE))
	HttpHeaders.CONTENT_TYPE — указывает, что передается JSON
	    В Spring HttpHeaders.CONTENT_TYPE — это константа для установки заголовка Content-Type.
	MediaType.APPLICATION_JSON_VALUE — означает, что Content-Type: application/json.
	    MediaType.APPLICATION_JSON_VALUE → определяет, что передаваемые данные — JSON.
        MediaType.APPLICATION_JSON_VALUE — это константа в Spring, которая равна строке "application/json".

.andExpect(jsonPath("personFirstName", is("Vasja"))) - проверяет, что в JSON-ответе поле personFirstName содержит "Vasja".

Как это работает внутри Spring?
	1.	Spring загружает тестовый контекст.
	2.	MockMvc отправляет виртуальный запрос в контроллер.
	3.	Контроллер принимает запрос, обрабатывает его и формирует JSON-ответ.
	4.	MockMvc получает ответ и проверяет его.
	5.	Если все проверки успешны, тест проходит.

**Сколько потратил времени на выполнение задачи?**
TODO: зафиксируй для себя сколько времени потратил на выполнение этого задания. Можно ли было его сделать быстрее?


**Заметки, идеи, предложения в свободной форме**
TODO: зафиксируй любые свои мысли, эмоции, идеи, размышления связанные с этим заданием.